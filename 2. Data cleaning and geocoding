""" Cleaning scraped data frame """

# Duplicate dataframe before cleaning
wgs_notcleaned = wgs

# Create lists to then add to the dataframe
area = []
street_address = []

# Cleaning data frame - loop
for i in range(len(wgs)):
   
    # ad url
    wgs.ad_url[int(i)] = re.searchwgs.ad_url[int(i)].
   
    # price
    wgs.price[int(i)] = wgs.price[int(i)].replace(" ","").replace("€","")
    
    # room size
    wgs.size_room[int(i)] = wgs.size_room[int(i)].replace("\n","",2).replace(" ","")\
    .replace("m","").replace("²","")

    # area
    area_item = wgs_notcleaned.size_wg[int(i)].split("|")[1]\
    .replace("Berlin","").replace("\n","",10).replace(" ","",200)\
    .replace("ä","ae").replace("Ä","Ae").replace("ö","oe").replace("Ö","oe").replace("Ü","Ue")\
    .replace("ü","ue").replace('ß',"ss")
 
    area.append(area_item)
    
    # street address
    street_item = wgs_notcleaned.size_wg[int(i)].split("|")[2].replace("\n","",20).replace(" ","",200)\
    .replace("ä","ae").replace("Ä","Ae").replace("ö","oe").replace("Ö","oe").replace("Ü","Ue")\
    .replace("ü","ue").replace('ß',"ss")
    
    street_address.append(street_item)
    
    # WG size
    wgs.size_wg[int(i)] = re.search('[0-9]+', wgs_notcleaned.size_wg[int(i)]).group()


# Add new columns to dataframe
wgs.insert(4, "area", area)
wgs.insert(5, "street_address", street_address)

# Create full adress to get geolocations
wgs["full_address"] = wgs["street_address"] + " " + wgs["area"] + " Berlin"

# Save data frame
wgs.to_csv("df_final.csv")



""" Geocoding """


import requests
from urllib.parse import urlencode

# api_key
google_api_key = 'AIzaSyDpkgRxrCpJdAqkJYZu3qnAW-pqjqCTWNk'

# Google geocoding sample request to use (Google's address)
# https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=YOUR_API_KEY

# Create function to geocode address into coordinates using the GoogleMaps API
def address_to_lat_lng(address_query, data_type = 'json'):
    url_base = f"https://maps.googleapis.com/maps/api/geocode/{data_type}" # create prototype for url for requests that adapts to address entered /take base point of url and store in url_base f-string
    param = {"address": address_query, "key": google_api_key} # define the parameters to be added behind the url_base for a standardized request
    url_param = urlencode(param) # encode the parameters to be added into url language
    url = f"{url_base}?{url_param}" # make url that adapts according to address as a combination of url_base and url_param connected by ? as in sample
    r = requests.get(url)
    if r.status_code not in range(200, 299): # status codes between 200 and 299 mean that request is successful 
        return {} # return empty dict if not successful
    latlng = {} #latitude longitude dict to be filled
    try: # in case it will be a successful lookup but won't find the data
        latlng = r.json()['results'][0]['geometry']['location'] # try to store the element 'location' within 'geometry' in the dictionary of items which is the 0th element of 'results' stored in json 
    except:
        pass
    return latlng.get("lat"), latlng.get("lng")

# Test
# print(address_to_lat_lng("Friedrichstraße 180, 10117 Berlin")) 

# Use function on data frame and apply geocoding function to create new variable with coordinates/polygons "lat_lng" and save again 
import pandas as pd

df_final = pd.read_csv("df_final.csv",sep=',')
df_final['lat_lng'] = df_final.street_address.apply(address_to_lat_lng) 
df_final.to_csv("df_final_polygone.csv", index= False)
