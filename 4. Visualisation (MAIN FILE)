""" Prepare data for visualisation """

# Load dataframe containing all observations and geocoded addresses
wg_df = pd.read_csv('df_final_polygone.csv',
                    sep = ";")
                 
# Drop observations with missing geocode (some addresses were too incomplete)
wg_df2 = wg_df[wg_df.lat_lng != '(None, None)'] 

# Split geometry variable into lat and lng, while keeping geometry (necessary for some visualisation functions)
wg_df2[['latitude','longitude']] = wg_df['lat_lng'].str.split(',',expand=True)

# Clean latitude and longitude variables
wg_df2['latitude'] = wg_df2['latitude'].str.replace('(', '')
wg_df2['longitude'] = wg_df2['longitude'].str.replace(')', '')

# Create subset of data for visualization
wg_df3 = wg_df2[["price", "latitude", "longitude"]]



""" Load a shapefile of Berlin """

# Source: http://insideairbnb.com/berlin/
# Contains multipolygons for Berlin's neighbourhoods (postal codes) necessary for aggregation on postal code level and visualization

# Save the file with geopandas so that it is recognized as a geodataframe
city = gpd.read_file("neighbourhoods.geojson")

# Convert the file into a format used by geopandas
city = city.to_crs({"init": "EPSG:4326"})



""" Perform a spatial join of the shapefile and the WG-gesucht dataframe """

# Create a geometry variable in geopandas format (containing "point-polygon") from longitude and latitude variables in the dataset
gdf = gpd.GeoDataFrame(wg_df3, geometry=gpd.points_from_xy(x=wg_df3.longitude, y=wg_df3.latitude))
gdf = gdf.set_crs(epsg=4326)
gdf = gdf.to_crs({"init": "EPSG:4326"})

# Use geopandas sjoin to assign the neighbourhood to each observation in our dataframe using the multipolygons and the created geometry variable ("point-polygons") as identifier
gdf_join = gpd.sjoin(gdf, city, how="inner", op='intersects') 

# Merge the datasets again using neighbourhood as identifier to assign the multipolygon to each observation in our dataframe
gdf_join1 = pd.merge(city, gdf_join, on='neighbourhood')

# Delete unnecessary variables from merge
del gdf_join1['index_right']
del gdf_join1['neighbourhood_group_y']

# Make the multipolygons the new geometry variable while renaming the old geometry variable to 'point', so these aren't confused by the plot function later
gdf_join1.rename(columns={'neighbourhood_group_x':'neighbourhood_group',
                      'geometry_x':'geometry', 
                      'geometry_y' :'point'},
                 inplace=True)
                 
# Drop room prices below 200 to exclude weekly rents 
gdf_join1 = gdf_join1[gdf_join1.price >= 200]



""" Descriptive statistics """

gdf_join1.mean()
gdf_join1.median()
gdf_join1.min()
gdf_join1.max()



""" Plot postings on map to see the data distribution """

# Edit the figure size first
plt.figure(num=None, figsize=(10,10), dpi=80, facecolor='w', edgecolor='k')

# Create plot and axes 
fig = plt.plot()
ax1 = plt.axes()

# Plot the geodataframe of the WG-gesucht postings on the shapefile of Berlin
city.plot(ax=ax1, alpha=0.1, edgecolor="black", facecolor="white")
gdf_join.plot(ax=ax1, alpha = 0.1, color="red", marker='$\\bigtriangledown$',) 

# Code to save the plot if needed
#ax1.figure.savefig('plot1.png', bbox_inches='tight') # code to save the plot if needed



""" Plot heat map of room prices """

# Create plot and axes
fig, ax = plt.subplots()

# Specify the variable to plot, the legend and the color scheme
gdf_join1.plot(
    ax=ax, 
    column='price', 
    categorical=False, 
    legend=True, 
    cmap='inferno_r',
)

# Add a title and a background color
ax.set(
    title='Room prices in Berlin', 
    aspect=1.3,
    facecolor='lightblue'
);

# Code to save the plot if needed
#ax.figure.savefig('heatmap.png', bbox_inches='tight')



""" Plot heat map of prices above/below the BAföG housing rate """

# Subtract the housing rate (325€ in Berlin) from the dataframe
gdf_join1['diff_price_bafög'] = gdf_join1['price'] - 325

# Create plot and axes
fig, ax = plt.subplots()

# Specify the new variable to plot, the legend and the color scheme
gdf_join1.plot(
    ax=ax, 
    column='diff_price_bafög', 
    categorical=False, 
    legend=True, 
    cmap='inferno_r',
)

# Add title and a background color
ax.set(
    title='Diff. of prices to Bafög of Berlin room postings', 
    aspect=1.3,
    facecolor='lightblue'
);

# Code to save the plot if needed
#ax.figure.savefig('heatmap2.png', bbox_inches='tight')



""" Plot the affordability of rooms in Berlin for students receiving government aid (BAföG)"""

# Find the min and max of diff_price_bafög to create affordability categories
gdf_join1.min()
gdf_join1.max()

# Crate categories of average affordability
cut_labels = ['Affordable with Bafög (325EUR)', 'In reach (0-50EUR above)', 'Out of reach (>51EUR above)']
cut_bins = [-175,0,50,830]
gdf_join1['bins'] = pd.cut(gdf_join1['diff_price_bafög'], bins=cut_bins, labels=cut_labels)

# Inspect the new dataframe
#gdf_join1.head()

# Create plot and axes
fig, ax = plt.subplots()

# Specify the new variable to plot, the legend and the color scheme
gdf_join1.plot(
    ax=ax, 
    column='bins', 
    categorical=False, 
    legend=True, 
    cmap='Wistia',
)

# Add title and a background color
ax.set(
    title='Average affordability of Berlin areas for students receiving Bafög', 
    aspect=1.3,
    facecolor='lightblue'
);

# Code to save the plot if needed
# ax.figure.savefig('heatmap3.png', bbox_inches='tight')
