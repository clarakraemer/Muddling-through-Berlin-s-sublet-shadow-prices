import requests
from urllib.parse import urlencode

#api_key
google_api_key = 'AIzaSyDpkgRxrCpJdAqkJYZu3qnAW-pqjqCTWNk'

# google geocoding sample request to use:
# https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=YOUR_API_KEY

# create function 
def address_to_lat_lng(address_query, data_type = 'json'):
    url_base = f"https://maps.googleapis.com/maps/api/geocode/{data_type}" # create prototype for url for requests that adapts to address entered /take base point of url and store in url_base f-string
    param = {"address": address_query, "key": google_api_key} # define the parameters to be added behind the url_base for a standardized request
    url_param = urlencode(param) # encode the parameters to be added into url language
    url = f"{url_base}?{url_param}" # make url that adapts according to address as a combination of url_base and url_param connected by ? as in sample
    r = requests.get(url)
    if r.status_code not in range(200, 299): # status codes between 200 and 299 mean that request is successful 
        return {} # return empty dict if not successful
    latlng = {} #latitude longitude dict to be filled
    try: # in case it will be a successful lookup but won't find the data
        latlng = r.json()['results'][0]['geometry']['location'] # try to store the element 'location' within 'geometry' in the dictionary of items which is the 0th element of 'results' stored in json 
    except:
        pass
    return latlng.get("lat"), latlng.get("lng")

#print(address_to_lat_lng("Friedrichstra√üe 180, 10117 Berlin")) #test

# use function on data frame and apply geocoding function to create new variable with coordinates/polygons "lat_lng" and save again 
import pandas as pd

df_final = pd.read_csv("df_final.csv",sep=',')

df_final['lat_lng'] = df_final.street_address.apply(address_to_lat_lng) 

df_final.to_csv("df_final_polygon.csv", index= False)

